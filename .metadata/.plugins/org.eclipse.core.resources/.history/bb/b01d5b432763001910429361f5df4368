package com.davidbase.utils;

import com.davidbase.model.PageComponent.RawRecord;

import java.util.HashMap;
import java.util.List;
import java.io.File;


/**
 * Class to read/write the Database catalog files.
 * Since the Catalog files are also treated as system tables they will be read/wrtten using DavisBaseFileHandler *
 */
public class DavisBaseCatalogHandler {
	
	public static final byte TABLES_TABLE_SCHEMA_ROWID = 0;
    public static final byte TABLES_TABLE_SCHEMA_DATABASE_NAME = 1;
    public static final byte TABLES_TABLE_SCHEMA_TABLE_NAME = 2;
    public static final byte TABLES_TABLE_SCHEMA_RECORD_COUNT = 3;
    public static final byte TABLES_TABLE_SCHEMA_COL_TBL_ST_ROWID = 4;
    public static final byte TABLES_TABLE_SCHEMA_NXT_AVL_COL_TBL_ROWID = 5;


    public static final byte COLUMNS_TABLE_SCHEMA_ROWID = 0;
    public static final byte COLUMNS_TABLE_SCHEMA_DATABASE_NAME = 1;
    public static final byte COLUMNS_TABLE_SCHEMA_TABLE_NAME = 2;
    public static final byte COLUMNS_TABLE_SCHEMA_COLUMN_NAME = 3;
    public static final byte COLUMNS_TABLE_SCHEMA_DATA_TYPE = 4;
    public static final byte COLUMNS_TABLE_SCHEMA_COLUMN_KEY = 5;
    public static final byte COLUMNS_TABLE_SCHEMA_ORDINAL_POSITION = 6;
    public static final byte COLUMNS_TABLE_SCHEMA_IS_NULLABLE = 7;

    public static final String PRIMARY_KEY_IDENTIFIER = "PRI";
    
    public static void InitializeDatabase() {
        File baseDir = new File(DavisBaseConstants.DEFAULT_DATA_DIRNAME);
        if(!baseDir.exists()) {
            File catalogDir = new File(DavisBaseConstants.DEFAULT_DATA_DIRNAME + "/" + DavisBaseConstants.DEFAULT_CATALOG_DATABASENAME);
            if(!catalogDir.exists()) {
                if(catalogDir.mkdirs()) {
                    new DavisBaseCatalogHandler().createCatalogDatabase();
                }
            }
        }

    }

    public boolean databaseExists(String databaseName){ 
    	File databaseDir = new File(this.getDatabasePath(databaseName));
         return  databaseDir.exists();     
    }
    
    public  String getDatabasePath(String databaseName) {
        return DavisBaseConstants.DEFAULT_DATA_DIRNAME + "/" + databaseName;
    }

    public boolean tableExists(String databaseName, String tableName) {
        return true;
    }

    public List<String> fetchAllTableColumns(String databaseName, String tableName){
        return null;
    }

    public boolean checkNullConstraint(String databaseName, String tableName, HashMap<String, Integer> columnMap){
        return true;
    }

    public HashMap<String, DataType> fetchAllTableColumnDataTypes(String databaseName, String tableName){
        return null;
    }

    public String getTablePrimaryKey(String databaseName, String tableName){
        return null;
    }

    public int getTableRecordCount(String databaseName, String tableName){
        return 0;
    }

    public boolean checkIfValueForPrimaryKeyExists(String databaseName, String tableName, int value){
        return true;
    }

    /**
     * can create multiple copies of the this function as you need (overloading)
     * delegate call to DavisBaseFileHandler.findRecord
     * @param databaseName
     * @param tableName
     * @param conditionList
     * @param getOne
     * @return
     */
    public List findRecord(String databaseName, String tableName, List conditionList, boolean getOne)  {
        return null;
    }

    /**
     * can create multiple copies of the this function as you need (overloading)
     * delegate call to DavisBaseFileHandler.findRecord
     * @param databaseName
     * @param tableName
     * @param record
     * @return
     */
    public boolean writeRecord(String databaseName, String tableName, RawRecord record){
        return true;
    }
}
